

;; set ppu addr, using r0 to select the page
	MAC PPU_SETADDR_r0
        lda PPU_STATUS	; reset address latch
        lda r0
        sta PPU_ADDR
        lda {1}	; lower byte
        sta PPU_ADDR
        ENDM




        
;;;; starting oam offset goes in X (and new one is returned in x)
RenderTitle: subroutine
	lda rand
        pha
        
        ;; draw GEOFF
        lda #geoff_text_x	; x pos in r0
        sta r0
        ldy #0
.loop1
	cpy #5
        beq .end_geoff	; if it's the end, bail (and roll back x!)
        
	lda #geoff_text_y	; y pos is constant
        sta OAM_RAM,x
        inx
        
        ;; choose a letter and show it
        jsr PickTitleLetter
        cmp #$ff
        bne .unskip_geoff
        lda #6
.unskip_geoff        
        sta OAM_RAM,x
        
        inx
        lda #0			; no attrs
        sta OAM_RAM,x
        inx
        lda r0			; bring x pos from r0
        sta OAM_RAM,x
        inx
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop1
.end_geoff
        
        ; draw STRANDING
        lda #stranding_text_x	; x pos in r0
        sta r0
.loop2
	cpy #14
        beq .end_stranding	; if it's the end, bail (and roll back x!)
        
	lda #stranding_text_y	; y pos is constant
        sta OAM_RAM,x
        inx
        jsr PickTitleLetter
        cmp #0
        cmp #$ff
        beq .skip_letter
        sta OAM_RAM,x
        inx
        lda #$0			; no attrs, pal s0
        sta OAM_RAM,x
        inx
        lda r0			; bring x pos from r0
        sta OAM_RAM,x
        inx
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop2
        
.skip_letter
	dex
        lda r0			; bring x pos from r0
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop2
	
.end_stranding
        
        ;; update the letter of STRANDING that we're skipping this frame
        jsr Rand
        and #$7
        sta title_skip
	pla
       	adc #113
        sta rand
        rts
        

geoff_text_x = $58
geoff_text_y = $50
geoff_text:
	.byte "GEOFF"
stranding_text_x = $38
stranding_text_y = $63
stranding_letters = 9
stranding_text:
	.byte "STRANDING"
        .byte 0
        
        
        
;;;;; read the next title letter - and potentially mess with it
PickTitleLetter: subroutine
	cpy title_skip		; skip this char if it's the skippable one this frame
	beq .skip_letter
        jsr Rand
        cmp title_fade
        bcc .random_letter
        lda geoff_text,y	; read next char
.done
        rts
.random_letter
	clc	; sub 1 from acc
        sbc #0
        and #$f
        rts
.skip_letter
	lda #$ff
	rts
        
        




;; blat delivery instructions into BG ram
; Acc should be $20 or $2C depending on the bg to write to
PrintDeliveryRequest: subroutine
	sta r0
;; copy penny's picture very manually
        PPU_SETADDR_r0 #$40
        lda #$ae
	sta PPU_DATA
        lda #$af
	sta PPU_DATA
        PPU_SETADDR_r0 #$60
        lda #$be
	sta PPU_DATA
        lda #$bf
	sta PPU_DATA
	
        PPU_SETADDR_r0 #$63
	ldy #0
.loop1:
	lda delivery_msg,y
        beq .eol1
	sta PPU_DATA
        iny
	bne .loop1
.eol1
        PPU_SETADDR_r0 #$a0
        iny
.loop2
	lda delivery_msg,y
        beq .eol2
	sta PPU_DATA
        iny
	bne .loop2
.eol2

	lda r0
        jsr SetBgAttrsForMsg
        rts

delivery_msg:
	.byte "PENNY L. ARABIATA",0,$22
        .byte "I need 80kg of wires, pls help",$22,0
        
        
DrawPenny: subroutine
;; copy penny's picture very manually
        PPU_SETADDR_r0 #$40
        lda #$ae
	sta PPU_DATA
        lda #$af
	sta PPU_DATA
        PPU_SETADDR_r0 #$60
        lda #$be
	sta PPU_DATA
        lda #$bf
	sta PPU_DATA
	rts
        
        
        MAC JumpTbl
        cmp #{1}
        bne .notthisone
        jsr {2}{1}
        rts
.notthisone
        .ENDM
        
        MAC PrintLine	; page(0/1), offset, string
        lda #{1}
        clc
        adc r0
        sta r0
.donepage
        PPU_SETADDR_r0 #{2}
	ldy #0
.loop:
	lda {3},y
        beq .done
	sta PPU_DATA
        iny
	bne .loop
.done
        ENDM
        
        
result_draw0: subroutine
	jsr DrawPenny
        ;; draw her name
        PPU_SETADDR_r0 #$63
	ldy #0
.loop1:
	lda delivery_msg,y
        beq .eol1
	sta PPU_DATA
        iny
	bne .loop1
.eol1
        inc result_line
	rts
        
result_draw1: subroutine
	PrintLine 0, $a0, delivered_msg_0
        inc result_line
	rts
        
result_draw2: subroutine
	PrintLine 0, $c0, delivered_msg_1
        inc result_line
	rts
        
result_draw3: subroutine
	PrintLine 0, $e0, delivered_msg_2
        inc result_line
	rts
        
result_draw4: subroutine
	PrintLine 1, $00, delivered_msg_3
        inc result_line
	rts
        
result_draw5: subroutine
	PrintLine 1, $20, delivered_msg_4
        inc result_line
	rts
        
result_draw6: subroutine
	PrintLine 1, $60, result_msg_0
        
        ;; add our score
        jsr CountCarriedPickups
        clc
        adc #'0
        sta PPU_DATA
        
        lda #$20
        sta PPU_DATA
        
        lda #'$
        sta PPU_DATA
        
        inc result_line
	rts
        
result_draw7: subroutine
	PrintLine 1, $80, result_msg_1
        inc result_line
	rts
        
result_draw8: subroutine
	PrintLine 1, $a0, result_msg_2
        inc result_line
	rts
        
result_draw9: subroutine
	PrintLine 1, $e0, result_msg_3
        inc result_line
	rts
        
result_draw10: subroutine
	PrintLine 2, $60, result_msg_4
        inc result_line
	rts
        
result_draw11: subroutine
	lda r0
        jsr SetBgAttrsForMsg
	rts
        
        
        
; Acc should be $20 or $2C depending on the bg to write to
UpdateResultsScreen: subroutine
	sta r0
        
        lda result_line
        JumpTbl 0, result_draw
        JumpTbl 1, result_draw
        JumpTbl 2, result_draw
        JumpTbl 3, result_draw
        JumpTbl 4, result_draw
        JumpTbl 5, result_draw
        JumpTbl 6, result_draw
        JumpTbl 7, result_draw
        JumpTbl 8, result_draw
        JumpTbl 9, result_draw
        JumpTbl 10, result_draw
        JumpTbl 11, result_draw
        rts
        
        

delivered_msg_0: 	.byte "Thanks for these wires! $$",0
delivered_msg_1: 	.byte "Now I can connect my hifi.",0
delivered_msg_2: 	.byte "Like you connecting people!",0
delivered_msg_3: 	.byte "I guess that's an allegory $",0
delivered_msg_4: 	.byte " $ $ $ $ $ $ $ $ $ $ $ $ $",0

result_msg_0: 	.byte "     # PACKAGES:  ",0
result_msg_1: 	.byte "          SPEED:  2 $",0
result_msg_2: 	.byte "         DAMAGE: 10 $",0
result_msg_3: 	.byte "         RATING:  S $$",0
result_msg_4: 		.byte "      press START to retry",0
        

;; clear the delivery instructions
; Acc should be $20 or $2C depending on the bg to write to
ClearDeliveryRequest: subroutine
	sta r0
;; clear top half of pic
        lda PPU_STATUS	; reset address latch
        PPU_SETADDR_r0 #$40
        lda #0
	sta PPU_DATA
	sta PPU_DATA
        PPU_SETADDR_r0 #$60
        lda #0
        ldx #$60
.loop:
	sta PPU_DATA
        dex
        bne .loop
        
        lda r0
        jsr SetBgAttrsForPlay
	rts
        
        
        
; set the bg attrs for message mode
; Acc should be $20 or $2C depending on the bg to write to
SetBgAttrsForMsg: subroutine
	clc	; move to attr page
        adc #3
        sta r0
        PPU_SETADDR_r0 #$C0
        
        ; first tile is special cos it's penny
        lda #$ef
        sta PPU_DATA
        
        ldx #40 - 1
        lda #$ff
.loop
        sta PPU_DATA
        dex
        bne .loop
        
	rts
        
; set the bg attrs for message mode
; Acc should be $20 or $2C depending on the bg to write to
SetBgAttrsForPlay: subroutine
	clc	; move to attr page
        adc #3
        sta r0
        PPU_SETADDR_r0 #$C0
        
        ldx #39
        lda #$55	; whole lotta palette 1
.loop
        sta PPU_DATA
        dex
        bne .loop
        
	rts
        
        
        

