
	include "nesdefs.dasm"
	include "_molenlib.dasm"



GROUND_Y = $b6
FINAL_SCREEN = $11

; this doesn't work if it's only in the defs inc file :shrugemoji:
NUM_BT_DEFS = 12

        
;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
       
       
	include "zeropage.dasm"




;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,NES_MIRR_VERT ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror
        

;;;;; START OF CODE

;   _____     _   _     _____     _____ 
;  |_   _|   | \ | |   |_   _|   |_   _|
;    | |     |  \| |     | |       | |  
;    | |     | . ` |     | |       | |  
;   _| |_    | |\  |    _| |_      | |  
;   \___/    \_| \_/    \___/      \_/  

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette and nametable VRAM
	jsr SetPalette	; set palette colors
        
        ; load map
        jsr LoadMap
        ; print the delivery request into bg2
        lda #$2C
        jsr PrintDeliveryRequest
        ;jsr PrepareResultsScreen
        
                
;;;; init sprites
	jsr InitMotes
        
;;;;; init objects
	lda #$78
        sta sam_x
        lda #GROUND_Y
        sta sam_y
        
;;;;; setup ppu
        lda #$18
        sta PPU_MASK 	; enable rendering
        lda #CTRL_NMI
        sta PPU_CTRL	; enable NMI
        



;   ___  ___      _          _                       
;   |  \/  |     (_)        | |                      
;   | .  . | __ _ _ _ __    | |     ___   ___  _ __  
;   | |\/| |/ _` | | '_ \   | |    / _ \ / _ \| '_ \ 
;   | |  | | (_| | | | | |  | |___| (_) | (_) | |_) |
;   \_|  |_/\__,_|_|_| |_|  \_____/\___/ \___/| .__/ 
;                                             | |    
;                                             |_|   
                                          
;;;;; start of frame

Tick: subroutine
; update animation timer
	inc timr
        lda #3
        cmp timr
        bne .done_timr
        lda #0
        sta timr
.done_timr

	lda state
        beq update_title
        cmp #1
        beq update_delivery
        cmp #2
        beq update_results
        jmp common_update

update_title:
	clc
	lda scrollx
        adc scrollx+1
        beq common_update
        inc title_fade
        bne common_update ; leave state 0 (title) after title_fade wraps
        lda #1
        sta state
        jmp common_update
        
update_delivery:
	lda scrollx+1
        cmp #FINAL_SCREEN	; have we reached penny?
        bcc common_update
        lda #2
        sta state
        jmp common_update

update_results:
	;; TODO: timer debounce and then START to reset
        lda pad0
        and #PAD_START
        beq .no_restart
        jmp Start
.no_restart:

common_update
	;; reset our world increment for this frame
	lda #0
	sta world_inc
        
	jsr UpdateSam
        
;; handle any push scrolling that sam did
	lda world_inc
	tax
.scroll_loop
        beq .no_scroll
        inc scrollx
        bne .simple_scroll
	;; we've just advanced a whole double-bg
        inc scrollx+1
        lda #1
        sta flipbg	; we need to handle bg flipping logic
.simple_scroll
        inx
        jmp .scroll_loop
.no_scroll
        
        jsr HandleFlinging
        jsr UpdateBTs
        jsr UpdateMotes
        
; build oam buffer
	ldx #0
        jsr RenderSam
        jsr RenderBTs
        jsr RenderPickups
        jsr RenderFlingers
        jsr RenderOoze
        
        lda state
        bne no_render_title
        jsr RenderTitle
no_render_title:
        lda #$ff
.blankspriteloop
        sta OAM_RAM,x
        inx	; lol, inxs
        inx
        inx
        inx
        cpx #$C0
        bcc .blankspriteloop
        
        

;;;;; end of frame
	;; TODO: move to NMI handler!
	jsr WaitSync

; handle any bg updates
	lda flipbg
        beq .post_flipbg
        lda scrollx+1
        cmp #2
        beq .wipe_req_msg
        jmp .bg_flip_done
.wipe_req_msg
	lda #$2C
        jsr ClearDeliveryRequest
.bg_flip_done
	lda #0
        sta flipbg
.post_flipbg
	
        lda state
        cmp #2
        bne .post_prepare_results
        
	lda #$2C
        jsr UpdateResultsScreen
        
        ; don't scroll past it
        lda #$f0
        sta scrollx
        lda #FINAL_SCREEN-1
        sta scrollx+1
.post_prepare_results
        
        
; copy oam
	lda #0
        sta OAM_ADDR
        lda #2
        sta OAM_DMA
        
; setup scroll
        lda scrollx
        sta PPU_SCROLL
        lda #0
        sta PPU_SCROLL
	lda scrollx+1	; load high byte
        and #1		; select its low bit
	ora #CTRL_NMI	; set rest of bits
        sta PPU_CTRL
        
; activate PPU graphics
	lda pad0
        sta ppad0
        jsr ReadJoypad0
        sta pad0
        jmp Tick
        
        



;  ______ _                       
;  | ___ \ |                      
;  | |_/ / | __ _ _   _  ___ _ __ 
;  |  __/| |/ _` | | | |/ _ \ '__|
;  | |   | | (_| | |_| |  __/ |   
;  \_|   |_|\__,_|\__, |\___|_|   
;                  __/ |          
;                 |___/     

UpdateSam: subroutine
;; update max speed
	jsr CountCarriedPickups
        ; now lookup our max speed
        tax
        lda pu_maxspeed,x
        sta sam_maxspd
        
        ;; if a BT has us, they slow us down
	lda bt_contact
        cmp #15
        bcc .post_bt_check
        lda sam_maxspd
        cmp #6
        bcc .post_bt_check
        sec
        sbc #4
        sta sam_maxspd
.post_bt_check

;;; update facing
	lda pad0
        and #PAD_LEFT
        bne .left
	lda pad0
        and #PAD_RIGHT
        bne .right
        jmp .friction
        
.left:
	lda sam_maxspd
        _NEG
        sta sam_maxspd
        cmp sam_vx
        beq .minspd
        dec sam_vx
        cmp #1
        bmi .minspd
        dec sam_vx
.minspd:
	SetSpriteFlipX sam_oam_attrs
	jmp .updateanim
        
.right:
	lda sam_vx
        cmp sam_maxspd
        bcs .maxspd
        ; bonus turnaround
        inc sam_vx
        cmp #-1
        bpl .maxspd
        inc sam_vx
.maxspd:
	lda sam_maxspd
        sta sam_vx
	ClearSpriteFlipX sam_oam_attrs
	jmp .updateanim
        
.friction
	lda sam_vx
        cmp #0
        bmi .incvel
        beq .endfric
.decvel
	clc
        sbc #0
	sta sam_vx
	jmp .endfric
.incvel
	sec
        adc #1
	sta sam_vx
.endfric
	lda sam_vx
        bne .updateanim
        sta sam_fr	; if sam isn't moving, his legs should be still
        sta sam_tmr	; ...and his anim timer should reset so there's instant feedback on starting to move
        jmp .postanim
.updateanim
        dec sam_tmr
        bpl .postanim
        lda sam_fr	; update animation frame
    	eor #1
        sta sam_fr
        lda #14		; reset timer
        sta sam_tmr
.postanim
        

; update sam x pos
screen_clamp_point = 10
push_scroll_point = $88

	lda sam_vx
        ;; add any underflow (so we can move less than 1px per frame)
        clc
        adc sam_x_uf
        pha
        bpl .pos_uf
        _NEG
        and #3
        _NEG
        jmp .store_uf
.pos_uf
        and #3
.store_uf
        sta sam_x_uf
        pla
        DivBy4s
        
        clc		; add on sam's x pos
        adc sam_x
        cmp #screen_clamp_point
        bcs .not_at_left
        lda sam_vx
        bpl .moving_on_up
        lda #0
        sta sam_vx
        sta sam_fr
.moving_on_up
        lda #screen_clamp_point
        jmp .updated_x
.not_at_left
	; do we need to push scroll?
        pha
        lda state
        cmp #2
        beq .end_of_world
        pla
        
        cmp #push_scroll_point
        bcc .updated_x
        ; yep! figure out how much by...
        sta r0
        lda #push_scroll_point
        sec
        sbc r0
        sta world_inc
        lda #push_scroll_point
        jmp .updated_x
        
.end_of_world
	pla
        cmp #$f0
        bcc .updated_x
        lda #$f0
.updated_x
        sta sam_x

	rts
        
        
;; build oam buf for sam
;;;; starting oam offset goes in X (and new one is returned in x)
RenderSam: subroutine
        lda sam_y	; store a copy of sam y
        pha
   	sec
        sbc #$10
        sta sam_y
        lda sam_oam_attrs ; load sprite attrs (flipx)
        ora #$01	; set palette 1
        sta r0		; r0 = attrs
        lda #$b0	; tiles are vertical from b0
        clc
        adc sam_fr	; anim frames are columns
        pha		; tile goes onto stack
        lda #0
        sta r1		; tile * row in r1
        ldx #0		; sprites 0, 1, 2
        ldy #3		; sam is 3 tall
.loop
        lda sam_y	; set sprite y
        sta OAM_RAM,x
        adc #8
        sta sam_y
        inx
        pla		; set sprite tile
        pha
        clc
        adc r1
        sta OAM_RAM,x
        inx
        lda r0		; set sprite attrs
        sta OAM_RAM,x
        inx
        lda sam_x	; set sprite x
        sta OAM_RAM,x
        inx
        lda r1		; inc tile row
        clc
        adc #$10
        sta r1
        
        dey		; loop
        bne .loop
        pla		; pull the tile off the stack
        pla
        sta sam_y
        rts
       
   
   
   
;  ______ _      _                    
;  | ___ (_)    | |                   
;  | |_/ /_  ___| | ___   _ _ __  ___ 
;  |  __/| |/ __| |/ / | | | '_ \/ __|
;  | |   | | (__|   <| |_| | |_) \__ \
;  \_|   |_|\___|_|\_\\__,_| .__/|___/
;                          | |        
;                          |_|       
      
;; pickup id in Y
;; returns in rx2
	MAC LoadPickupPos
        lda #0
        sta rx2+1
        lda pu_pos_32,y
        sta rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        ENDM
        

;; returns the number of pickups carried in A
; trashes X & Y
CountCarriedPickups: subroutine
        ldx #0
        lda #0
        ldy #0
        clc
.pu_loop
	lda pu_state,x
        cmp #1
        bne .not_carried
        iny
.not_carried
        inx
        cpx #num_pickups
        bne .pu_loop
        tya
        rts
        
       
;;;; starting oam offset goes in X (and new one is returned in x)
RenderPickups: subroutine
	lda sam_x	; put carry pos in r0
        sta r0
        
        ;; store backpack inc in r1 (and update initial pos)
        lda sam_oam_attrs ; load sprite attrs (flipx)
        and #OAM_FLIPX
        beq .face_right
.face_left        
        lda #-4		; inc per backpack is -4
        sta r1
        lda r0
	clc
        adc #3
        sta r0
        jmp .done_flip
.face_right
	lda #4		; inc per backpack is 4
        sta r1		; r1 is backpack inc
        lda r0		; adjust initial pos
	sec
        sbc #8
        sta r0 
.done_flip
	ldy #0		; y is curr pickup
        
.loop
	lda pu_state,y
        cmp #0
        beq .on_ground
        cmp #2		; has been flung
        beq .next

.on_back
	lda sam_y	; sprite y is on sam's back
        sec
        sbc #10
        sta OAM_RAM,x
        inx
        lda #pickup_carry_tile	; sprite tile is static
        sta OAM_RAM,x
        inx
        lda #1		; set sprite attrs (shares a pal with sam, never flips x)
        sta OAM_RAM,x
        inx
        lda r0		; sprite x is behind sam
        sta OAM_RAM,x
        inx
        sec
      	sbc r1
        sta r0
        
        jmp .next
        
.on_ground
	jsr UpdateOnGroundPickup
        
        ;; is it on screen?
        lda rx2+1
        beq .onscreen
	;; this pickup is fully offscreen - don't add a sprite for it
        jmp .next
.onscreen
        lda #GROUND_Y	; set sprite y
        sta OAM_RAM,x
        inx
        lda #pickup_static_tile
        sta OAM_RAM,x
        inx
        lda #1		; set sprite attrs (shares a pal with sam, never flips x)
        sta OAM_RAM,x
        inx
        lda rx2
        sta OAM_RAM,x
        inx
        
.next
        iny		; loop
        cpy #num_pickups
        bne .loop
	rts
        
   

arm_length = 12

UpdateOnGroundPickup: subroutine
	lda #1
	LoadPickupPos		 ; decompress pickup pos
        _SUB16 rx2, scrollx, rx2 ; rx2 = screen-space pickup pos
        
        lda rx2+1	; if the pickup is on a different screen, we're done here
        bne .done
        
        ;; check for pickup
        lda pad0
        and #PAD_UP
        beq .done
        
        ;; the player's asked to pick it up - can they?
        lda sam_x	; get abs distance
        clc
        adc #4		; move to centre of sam
        sec
        sbc rx2
        bpl .positive
        _NEG
.positive
	cmp #arm_length
        bpl .toofar
        ;; we can pick it up!
        lda #1
        sta pu_state,y
.toofar
        
.done
	rts
        
        
        
        
;      ______    _____        
;      | ___ \  |_   _|       
;      | |_/ /    | |     ___ 
;      | ___ \    | |    / __|
;      | |_/ /    | |    \__ \
;      \____/     \_/    |___/
                            

;; BT id in Y
;; returns in rx2
	MAC LoadBTPos
        lda #0
        sta rx2+1
        lda bt_pos_32,y
        sta rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        _LSL16 rx2
        ENDM


UpdateBTs: subroutine
	lda #0		; reset our 'touching now' flag
        sta bt_touching
        
	jsr UpdateBTVisibilty

        ldy #0
.loop
        lda bt_state,y
        bne .update_active
        cmp #2		; has this one been deactivated?
        beq .next	; yup
        
        ;; should we be updating this BT?
        LoadBTPos	; load it's world pos into rx2
        _SUB16 rx2, scrollx, rx2 ; rx2 = screen-space BT pos
        ; activate any BTs on this screen or next
        lda rx2+1
        cmp #2
        bpl .next
        
        ;; this one needs to be activated!
        jsr ActivateBT
        
.update_active
	jsr UpdateBTPos

	;; does this one need to be deactivated?
        lda bt_posxh,y
        cmp #2
        bcc .still_active
        jsr DeactivateBT
.still_active

	;; are they in contact with sam? if so, it's kicking off!
        jsr CheckForBTContact
        
	jsr UpdateBTFlickering
       
.next
        iny
        cpy #NUM_BT_DEFS
        bne .loop
        
        ;; if we haven't been in touch with a BT for a while, downgrade our contact
        lda bt_touching
        bne .post_adjust_contact
        lda timr
        bne .post_adjust_contact
        sec
        lda bt_contact
        sbc #1
        bcc .post_adjust_contact	; don't drop below 0
        sta bt_contact
.post_adjust_contact
	rts
        
        
    
max_bt_vis_track = 60
        
UpdateBTVisibilty: subroutine
	;; if being attacked, bt_vis=5
        lda bt_contact
        beq .no_contact
        lda #5
        sta bt_visibility
        lda #max_bt_vis_track
        sta bt_vis_track
        rts
        
.no_contact
	lda sam_vx
        beq .show_bts
        
.hide_bts
	lda bt_vis_track
        beq .done
        clc
        sbc #2	; hide faster than show
        bcs .done
        lda #0
        jmp .done
        
.show_bts
	lda bt_vis_track
        clc
        adc #1
        cmp #max_bt_vis_track
        bcc .done
        lda #max_bt_vis_track
        
.done
	sta bt_vis_track
        ; map that onto bt_visibilty
        bne .nonzero
        lda #1
        sta bt_visibility
        rts
        
.nonzero
	;lsr
        ;lsr
        lsr
        lsr
        lsr
        lsr
        clc
        adc #1
        sta bt_visibility
	rts
        
        
        
ActivateBT: subroutine
        lda #1
        sta bt_state,y
        ; set up attrs
        lda #2		; set sprite palette
        sta bt_attrs,y
        ; set up x pos
        lda rx2
        sta bt_posxl,y
        lda rx2+1
        sta bt_posxh,y
        ; start at arbitrary height
        jsr Rand
        and #$f
        adc #$70
        sta bt_posy,y
	rts
        
DeactivateBT: subroutine
	lda #2
        sta bt_state,y
	rts
        

UpdateBTPos: subroutine
        ; unpack posx from lo,hi into rx2
        lda bt_posxl,y
        sta rx2
        lda bt_posxh,y
        sta rx2+1
        
        ;; track world scroll
        lda world_inc	; put world inc in r1:r0
        beq .world_static
        sta r0
        lda #$ff	; world inc is zero or negative
        sta r1
        _ADD16 rx2, r0, rx2
.world_static

	; random jitter
        jsr Rand
        and #$f
        cmp #1
        beq .driftr
        cmp #2
        beq .driftl
        cmp #3
        beq .driftu
        cmp #4
        beq .driftd
        jmp .driftdone

.driftr 
	_INC16 rx2
        jmp .driftdone
.driftl  
	_DEC16 rx2
        jmp .driftdone
.driftu
	lda bt_posy,y
        clc
        adc #1
        ;; FIXME?: could overflow
        sta bt_posy,y
        jmp .driftdone
.driftd  
	lda bt_posy,y
        sec
        sbc #1
        ;; FIXME?: could underflow
        sta bt_posy,y
.driftdone

	;; drift towards the player if nearby
        lda rx2+1
        bne .post_attract
        lda bt_state,y
        cmp #1
        bne .post_attract
        
        lda sam_x
        cmp rx2
        bcs .attractr
        dec rx2
        jmp .post_x_attract
.attractr
	inc rx2
.post_x_attract

        jsr Rand
        cmp #120
        bcs .post_y_attract
        lda sam_y
        sbc #18		; aim for his head!
        cmp bt_posy,y
        bcs .attractu
        lda bt_posy,y
        sbc #0	; we know that carry is clear
        sta bt_posy,y
        jmp .post_y_attract
.attractu
        lda bt_posy,y
        adc #0	; we know that carry is set
        sta bt_posy,y
.post_y_attract
.post_attract

        ; pack posx back into lo,hi
        lda rx2
        sta bt_posxl,y
        lda rx2+1
        sta bt_posxh,y
        
	rts
        
        
        
;; check to see if this BT has got its hands on Sam
; assumes bt_posx is in rx2, and btN is in y
CheckForBTContact: subroutine
	; if ofscreen, sam's safe
        lda rx2+1
        bne .done
        
	; use 8 bit AABB
        ;; if btx_max < samx_min...
        lda rx2
        adc #14		; we want btx_max
        cmp sam_x
        bcc .done
        
        ;; if samx_max < btx_min...
        lda sam_x
        adc #7		; we want samx_max
        cmp rx2
        bcc .done
        
        ;; if samy_max < bty_min...
        lda bt_posy,y
        sbc #7		; we want samy_max and bty_min, so -24-8 ish
        cmp sam_y
        bcs .done
        
        ;; if bty+8 < samy_max-24...
        lda bt_posy,y
        adc #32		; we want samy_min and bty_max, so +8
        cmp sam_y
        bcc .done
        
        ;; sad times for old sam....
        lda #1		; remember we're being touched right now
        sta bt_touching	;  (decreases max speed)
        
        clc
        lda bt_contact
        adc #1
        bcc .save_contact
        lda #$ff
.save_contact
        sta bt_contact
        
.done
	rts
        
        
        
;; update flickering of BTs that should be flickering
; BT in Y
UpdateBTFlickering: subroutine
        lda timr
        bne .no_flkr
        
	;; update flickering
        lda bt_visibility
        ;; don't flicker later stages
        sec
        sbc #1
        cmp #num_bt_flkr_states
        bcs .unflkr
       
        lda bt_attrs,y
        and #~OAM_FLIPX
        pha
        jsr Rand
        and #OAM_FLIPX
        sta r1
        pla
        ora r1
        jmp .done_flkr
.unflkr
	lda #2
        jmp .done_flkr
.no_flkr
	lda bt_attrs,y
.done_flkr
        sta bt_attrs,y
	rts
        
        
        
        
;;;; starting oam offset goes in X (and new one is returned in x)
RenderBTs: subroutine
	lda bt_visibility
        beq .done
        
	ldy #0
.loop
	; don't render them if they're offscreen
        lda bt_posxh,y
        bne .next
        
        ; ... or if they've been deactivated
	lda bt_state,y
        cmp #1
        bne .next
        
        ;; set r0 to sprite index = base + (state-1)*2
        lda bt_visibility
        sec
        sbc #1
        asl
        clc
        adc #bt_tile_start
        sta r0
        
        ;; sprite Y
        lda bt_posy,y
        sta OAM_RAM,x	 ; tl
        sta OAM_RAM+4,x  ; tr
        clc
        adc #8
        sta OAM_RAM+8,x  ; bl
        sta OAM_RAM+12,x ; br
        inx
        
        ;; sprite tile
        lda r0
        sta OAM_RAM,x	 ; tl
        clc
        adc #1
        sta OAM_RAM+4,x	 ; tr
        clc
        adc #15
        sta OAM_RAM+8,x	 ; bl
        clc
        adc #1
        sta OAM_RAM+12,x ; br
        inx
        
        ;; sprite attrs
        lda bt_attrs,y
        sta OAM_RAM,x
        sta OAM_RAM+4,x
        sta OAM_RAM+8,x
        sta OAM_RAM+12,x
        inx
        
        ;; sprite X
        ;; TODO: deal with half-offscreen
        lda bt_posxl,y
        sta OAM_RAM,x	 ; tl
        sta OAM_RAM+8,x  ; bl
        clc
        adc #8
        sta OAM_RAM+4,x	 ; tr
        sta OAM_RAM+12,x ; br
        inx
        
        ;; skip the rest of the sprites
        txa
        clc
        adc #12
        tax
        
.next
        iny
        cpy #NUM_BT_DEFS
        bne .loop
.done
	rts






;       __   _   _                                     
;      / _| | | (_)                                    
;     | |_  | |  _   _ __     __ _    ___   _ __   ___ 
;     |  _| | | | | | '_ \   / _` |  / _ \ | '__| / __|
;     | |   | | | | | | | | | (_| | |  __/ | |    \__ \
;     |_|   |_| |_| |_| |_|  \__, |  \___| |_|    |___/
;                             __/ |                    
;                            |___/      

UpdateFlinger: subroutine
	lda flingstatus
        beq .done
        
        ; update y
        inc flingvy
        lda flingvy	; scale down by 2
        DivBy2s
        sta r0
        
        lda flingy
        clc
        adc r0
        sta flingy
        cmp #GROUND_Y
        bcs .hitground
        
        lda flingvx
        DivBy2s
        clc
        adc flingx
        sta flingx
        rts
        
.hitground
	lda #0
        sta flingvy
        sta flingstatus
        
.done
	rts
        


HandleFlinging: subroutine
	jsr UpdateFlinger

	lda flingdebounce
        beq .nodebounce
        dec flingdebounce
	rts
.nodebounce

	; is there a flinger still going?
	lda flingstatus
        bne .done
        
	lda ppad0
        eor #$ff
        and pad0
        and #PAD_B
        bne .pressed
.done
        rts
        
.pressed
	;; find a pickup that we can fling
        ldx #0
.loop
	lda pu_state,x
        cmp #1
        beq .found
	inx
        cpx #num_pickups
        bcc .loop
        ; nothing to fling
        rts

.found
	;; x is the pickup to fling
        lda #2
        sta pu_state,x
        
        lda #1
        sta flingstatus
        
        ; init pos
        lda sam_x
        sbc #6
        sta flingx
        lda #GROUND_Y-12
        sta flingy
        lda #-5 * 2
        sta flingvy
        lda #-2 * 2
        sta flingvx
        
	lda #11
        sta flingdebounce
        
	rts



RenderFlingers: subroutine
	lda flingstatus
        beq .done
        
        AddSprite flingx, flingy, #pickup_static_tile, #1
        
.done
	rts








;       ___     ___     ___     ___    ____   ___ 
;      / _ \   / _ \   / _ \   / _ \  |_  /  / _ \
;     | (_) | | (_) | | (_) | | (_) |  / /  |  __/
;      \___/   \___/   \___/   \___/  /___|  \___|


        
;;;; starting oam offset goes in X (and new one is returned in x)
RenderOoze: subroutine
	; no ooze if low contact
	lda bt_contact
        cmp #15
        bcc .done
        
        ; just light ooze if light contact
        cmp #50
        bcc .light
        
        cmp #100
        bcc .medium
        
        cmp #150
        bcc .heavy
        
.terrifying
        jsr RenderTerrifyingOoze
        rts
.heavy
        jsr RenderHeavyOoze
        rts
.medium
        jsr RenderMediumOoze
        rts
.light
        jsr RenderLightOoze
        rts
.done
	rts




OOZE_Y = GROUND_Y + 8


RenderLightOoze: subroutine
	lda sam_x	;x
        sec
        sbc #4
        sta r0
	lda #OOZE_Y	;y
        sta r1
        AddSprite r0, r1, #$f1, #OAM_FLIPX | 2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f1, #2
        
	rts

RenderMediumOoze: subroutine
	lda sam_x	;x
        sec
        sbc #12
        sta r0
	lda #OOZE_Y	;y
        sta r1
        AddSprite r0, r1, #$f1, #OAM_FLIPX | 2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f1, #2
        
	rts

RenderHeavyOoze: subroutine
	lda sam_x	;x
        sec
        sbc #20
        sta r0
	lda #OOZE_Y	;y
        sta r1
        AddSprite r0, r1, #$f1, #OAM_FLIPX | 2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f1, #2
        
	rts


RenderTerrifyingOoze: subroutine
	lda sam_x	;x
        sec
        sbc #24
        sta r0
	lda #OOZE_Y	;y
        sta r1
        AddSprite r0, r1, #$f1, #OAM_FLIPX | 2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f0, #2
        
        lda r0		;update x
        clc
        adc #8
        sta r0
        AddSprite r0, r1, #$f1, #2
        
        ;; and now, for hands!
        lda #OOZE_Y-8
        sta r1
        lda sam_x
        sbc #14
        sta r0
        
        lda rand
        pha
        lda scrollx+1	; seed rand with scroll
        sta rand
        
        lda #$e1
        sta rx2
        
        ldy #4
.loop
        jsr Rand
        and #15
        adc r0
        sta r0
        AddSprite r0, r1, rx2, #2
        lda rx2
        eor #1
        sta rx2
        
        dey
        bne .loop
        
        pla
        sta rand
        
	rts


        
        
      
;   _ __ ___  _ ___  ___ 
;  | '_ ` _ \| / __|/ __|
;  | | | | | | \__ \ (__ 
;  |_| |_| |_|_|___/\___|
        
base_mote = $30
InitMotes: subroutine
        ;; init motes
        InitSprite base_mote +  0, $33, $10, $16
        InitSprite base_mote +  1, $77, $26, $17
        InitSprite base_mote +  2, $46, $14, $18
        InitSprite base_mote +  3, $11, $61, $16
        InitSprite base_mote +  4, $76, $a2, $17
        InitSprite base_mote +  5, $a0, $13, $18
        InitSprite base_mote +  6, $e3, $b2, $16
        InitSprite base_mote +  7, $c1, $51, $17
        InitSprite base_mote +  8, $e4, $73, $18
        InitSprite base_mote +  9, $b3, $b5, $16
        InitSprite base_mote + 10, $91, $d6, $17
        InitSprite base_mote + 11, $48, $e9, $18
        InitSprite base_mote + 12, $40, $93, $16
        InitSprite base_mote + 13, $33, $b5, $17
        InitSprite base_mote + 14, $83, $64, $18
        InitSprite base_mote + 15, $d8, $e9, $16
        ; flip some
        lda #OAM_FLIPX
        sta OAM_RAM+2+$30*4
        sta OAM_RAM+2+$32*4
        sta OAM_RAM+2+$33*4
        sta OAM_RAM+2+$34*4
        sta OAM_RAM+2+$38*4
        sta OAM_RAM+2+$3a*4
        sta OAM_RAM+2+$3e*4
	rts
        
UpdateMotes: subroutine
	ldx #base_mote * 4
        ldy #$10
.loop:
        lda world_inc
        clc
        adc OAM_RAM+3,x
        sta OAM_RAM+3,x
        
        lda timr
        bne .next
	dec OAM_RAM,x	; dec spr.y

	; move to next sprite
.next
        inx
        inx
        inx
        inx
        dey
	bne .loop	; loop
.done
        rts		; return to caller





LoadMap: subroutine
	; bg 0
	PPU_SETADDR $22c0
        ldx #0
.loop
	lda land_ground,x
        sta PPU_DATA
        inx
        bne .loop
.loop_attr
	lda land_attrs,x
        sta PPU_DATA
        inx
        cpx #$40
        bne .loop_attr
        
        ; bg 1
	PPU_SETADDR $26c0
        ldx #0
.loop2
	lda land_ground,x
        sta PPU_DATA
        inx
        bne .loop2
.loop2_attr
	lda land_attrs,x
        sta PPU_DATA
        inx
        cpx #$40
        bne .loop2_attr
        
        rts
        



; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller
       

	include "messages.dasm"


;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"
        
       
Rand: subroutine
	txa
        pha
	lda rand
        tax
        lda rand_table,x
        sta rand
        pla
        tax
        lda rand
	rts

;;;;; INTERRUPT HANDLERS

NMIHandler:
	rti		; return from interrupt

;;;;; CONSTANT DATA

Palette:
	hex 2d		;screen color
	hex 09081d	;background 0 - foreground
        hex 25		; bg1 unused
        hex 1d181b	;background 1 - background
        hex 25		; bg2 unused
        hex 07170c	;background 2 - penny
        hex 25		; bg3 unused
        hex 311d0f	;background 3 - text
        hex 3d		;screen colour MIRROR
        hex 001d0f	;sprite 0 -- motes
        hex 25		; bg1 unused MIRROR
        hex 0d1727	;sprite 1 -- sam & pickups
        hex 25		; bg2 unused MIRROR
        hex 1d2d0f	;sprite 2 -- BTs
        hex 25		; bg3 unused MIRROR
        hex 252525	;sprite 3
        
        
        align $100
	include "rand.asm"
        
        include "pickupdefs.asm"
	include "btdefs.inc"

        
 	include "land.asm"

;;;;; CPU VECTORS

	NES_VECTORS

;;;;; TILE SETS

	org $10000
        incbin "strand.chr"
        incbin "strand.chr"
