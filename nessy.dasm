
	include "nesdefs.dasm"

;;; MACROS

; InitSprite  spr, x, y, tile
        MAC InitSprite
        lda #{1}
        asl
        asl
        tax
        lda #{3}
        sta OAM_RAM,x
        lda #{4}
        sta OAM_RAM+1,x
        lda #{2}
        sta OAM_RAM+3,x
        ENDM
        
        
;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
        
timr	byte
posx	byte

;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,0 ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror
        

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette and nametable VRAM
	jsr SetPalette	; set palette colors
        
                
;;;; init sprites
	; many stars
	lda #$18   ; star!
        ldx #$20 * 4
        ldy #0
init_sprite_loop:
	inx
	sta OAM_RAM,x
        inx
        inx
        inx
        iny
        cpy #$10
        bne init_sprite_loop
        
        InitSprite $20, $24, $33, $b6
        InitSprite $21, $77, $26, $18
        InitSprite $22, $46, $14, $18
        InitSprite $23, $11, $61, $18
        InitSprite $24, $76, $a2, $18
        InitSprite $25, $a0, $13, $18
        InitSprite $26, $e3, $b2, $18
        InitSprite $27, $c1, $51, $18
        InitSprite $28, $e4, $73, $b6
        InitSprite $29, $b3, $b5, $18
        InitSprite $2a, $91, $d6, $b6
        InitSprite $2b, $48, $e9, $18
        InitSprite $2c, $10, $93, $18
        InitSprite $2d, $33, $b5, $18
        InitSprite $2e, $83, $64, $18
        InitSprite $2f, $d8, $e9, $18
        
        
Tick:
; update posx
	inc timr
        lda #3
        cmp timr
        bne endupdate_posx
        jsr UpdateStars
        lda #0
        sta timr
	inc posx
        lda #8
        cmp posx
        bpl endupdate_posx
        lda #0
        sta posx
endupdate_posx:


	PPU_SETADDR $2187
        jsr HelloVRAM	; print message in name table


        
        
; reset PPU address and scroll registers
        lda #0
        sta PPU_ADDR
        sta PPU_ADDR	; PPU addr = $0000
        sta PPU_SCROLL
        sta PPU_SCROLL  ; PPU scroll = $0000
        lda #CTRL_NMI
        sta PPU_CTRL	; enable NMI
        jsr WaitSync
        
; copy oam
	lda #0
        sta OAM_ADDR
        lda #2
        sta OAM_DMA
; activate PPU graphics
        lda #$1e
        sta PPU_MASK 	; enable rendering
        jmp Tick

; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller

; fill video RAM with "Hello World" msg
; PPU ADDR needs to have been set with target pos before calling
HelloVRAM: subroutine
	ldy #0		; set Y counter to 0
.loop:
	lda HelloMsg,y	; get next character
        beq .end	; is 0? exit loop
	sta PPU_DATA	; store+advance PPU
        iny		; next character
	bne .loop	; loop
.end
        rts		; return to caller; fill video RAM with "Hello World" msg

; clear a chunk of video ram
; PPU ADDR needs to have been set with target pos before calling
; Acc is the clear length
ClearLine: subroutine
	ldx #0
.loop:
	stx PPU_DATA	; store+advance PPU
        sbc #1
	bcs .loop	; loop
        rts		; return to caller

; ASCII message to display on screen
HelloMsg:
	.byte "hello "
        .byte $d8
        .byte $da
        .byte " spaceboy"
        .byte 0		; zero terminator
        
        
        
        
UpdateStars: subroutine
	ldx #$20 * 4
.loop:
	inc OAM_RAM,x	; inc spr.y
        lda #$f8	; spr.x &= $f8  (bottom 3 bits 0)
        and OAM_RAM+3,x
        sta OAM_RAM+3,x
        lda OAM_RAM,x	; A = spr.y & $f
        and #$f
        lsr		; A >>= 1   (A is 3 bits)
        cmp #4		; N = (A - 5 < 0)
        bmi .add_dx	; if (A >= 5) then
        eor #$ff	;    A = -A
        clc
        adc #8
.add_dx
	clc
        adc OAM_RAM+3,x
        sta OAM_RAM+3,x
        
	; move to next sprite
	txa
        clc
        adc #4
        tax
	cpx #$40 + (#$21 * 4)
	bne .loop	; loop
        rts		; return to caller


;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"

;;;;; INTERRUPT HANDLERS

NMIHandler:
	rti		; return from interrupt

;;;;; CONSTANT DATA

Palette:
	hex 01		;screen color
	hex 0c302001	;background 0
        hex 25122201	;background 1
        hex 02112101	;background 2
        hex 0112221c	;background 3
        hex 25273825	;sprite 0
        hex 142a3725	;sprite 1
        hex 142b3b25	;sprite 2
        hex 1c2c3c25	;sprite 3

;;;;; CPU VECTORS

	NES_VECTORS

;;;;; TILE SETS

	org $10000
        incbin "jroatch.chr"
        incbin "jroatch.chr"
