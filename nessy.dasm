
	include "nesdefs.dasm"

;;; MACROS


OAM_FLIPX = $40


; Arithmetic shift right A
        MAC _ASR
        cmp #$80
        ror
        ENDM


; InitSprite  spr, x, y, tile
        MAC InitSprite
        lda #{1}
        asl
        asl
        tax
        lda #{3}
        sta OAM_RAM,x
        lda #{4}
        sta OAM_RAM+1,x
        lda #{2}
        sta OAM_RAM+3,x
        ENDM
        
        
;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
        
; "registers"
r0	byte
r1	byte

rand	byte

state	byte

timr	byte
pad0	byte

sam_x	byte
sam_y	byte
sam_vx	byte
sam_oam_attrs	byte
sam_fr	byte
sam_tmr	byte

world_inc byte
scrollx word

title_skip byte
title_fade byte


;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,NES_MIRR_VERT ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror
        

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette and nametable VRAM
	jsr SetPalette	; set palette colors
        
        ; load map
        jsr LoadMap
        
                
;;;; init sprites
        
        ;; init motes
        InitSprite $20, $33, $10, $16
        InitSprite $21, $77, $26, $17
        InitSprite $22, $46, $14, $18
        InitSprite $23, $11, $61, $16
        InitSprite $24, $76, $a2, $17
        InitSprite $25, $a0, $13, $18
        InitSprite $26, $e3, $b2, $16
        InitSprite $27, $c1, $51, $17
        InitSprite $28, $e4, $73, $18
        InitSprite $29, $b3, $b5, $16
        InitSprite $2a, $91, $d6, $17
        InitSprite $2b, $48, $e9, $18
        InitSprite $2c, $40, $93, $16
        InitSprite $2d, $33, $b5, $17
        InitSprite $2e, $83, $64, $18
        InitSprite $2f, $d8, $e9, $16
        ; flip some
        lda #OAM_FLIPX
        sta OAM_RAM+2+$20*4
        sta OAM_RAM+2+$22*4
        sta OAM_RAM+2+$23*4
        sta OAM_RAM+2+$24*4
        sta OAM_RAM+2+$28*4
        sta OAM_RAM+2+$2a*4
        sta OAM_RAM+2+$2e*4
        
;;;;; init objects
	lda #$78
        sta sam_x
        lda #$b6
        sta sam_y
        
;;;;; setup ppu
        lda #$18
        sta PPU_MASK 	; enable rendering
        lda #CTRL_NMI
        sta PPU_CTRL	; enable NMI
        

;;;;; start of frame

Tick:
; update posx
	lda #0
	sta world_inc
	inc timr
        lda #3
        cmp timr
        bne endupdate_posx
        dec world_inc
        jsr UpdateMotes
        inc scrollx
        bne .scrollx_done
        inc scrollx+1
.scrollx_done
        lda #0
        sta timr
endupdate_posx:
	lda state
        beq update_title
        jmp common_update

update_title:
	lda #$2
        bit scrollx
        beq common_update
        inc title_fade
        bne common_update
        inc state

common_update:
	jsr UpdateSam
        
; build oam buffer
	ldx #0
        jsr RenderSam
        
        lda state
        bne no_render_title
        jsr RenderTitle
no_render_title:
	;; HACK: blank out title sprites
        lda #$ff
.blankspriteloop
        sta OAM_RAM,x
        inx	; lol, inxs
        inx
        inx
        inx
        cpx #$80
        bne .blankspriteloop
        
        

;;;;; end of frame
	jsr WaitSync
        
; copy oam
	lda #0
        sta OAM_ADDR
        lda #2
        sta OAM_DMA
        
; setup scroll
        lda scrollx
        sta PPU_SCROLL
        lda #0
        sta PPU_SCROLL
        
; activate PPU graphics
        jsr ReadJoypad0
        sta pad0
        jmp Tick
        
        


UpdateSam: subroutine
;;; update facing
	lda pad0
        and #$2
        bne .left
	lda pad0
        and #$1
        bne .right
        jmp .friction
.left:
	lda sam_vx
        cmp #-12
        beq .minspd
        dec sam_vx
        cmp #1
        bmi .minspd
        dec sam_vx
.minspd:
; set flipx flag
	lda sam_oam_attrs
	ora #$40
        sta sam_oam_attrs
	jmp .updateanim
.right:
	lda sam_vx
        cmp #12
        beq .maxspd
        ; bonus turnaround
        inc sam_vx
        cmp #-1
        bpl .maxspd
        inc sam_vx
.maxspd:
; clear flipx flag
	lda sam_oam_attrs
        and #$bf
        sta sam_oam_attrs
	jmp .updateanim
        
.friction
	lda sam_vx
        cmp #0
        bmi .incvel
        beq .endfric
.decvel
	clc
        sbc #0
	sta sam_vx
	jmp .endfric
.incvel
	sec
        adc #1
	sta sam_vx
.endfric
	lda sam_vx
        bne .updateanim
        sta sam_fr	; if sam isn't moving, his legs should be still
        sta sam_tmr	; ...and his anim timer should reset so there's instant feedback on starting to move
        jmp .postanim
.updateanim
        dec sam_tmr
        bpl .postanim
        lda sam_fr	; update animation frame
    	eor #1
        sta sam_fr
        lda #14		; reset timer
        sta sam_tmr
.postanim
        

; update sam x pos  
	lda sam_vx
        _ASR		; vx /= 4
        _ASR
        clc		; add on sam's x pos
        adc sam_x
        adc world_inc	; plus the world scroll pos
        cmp #10
        bcs .not_at_left
        lda #10
.not_at_left
        sta sam_x

	rts
        
        
;; build oam buf for sam
;;;; starting oam offset goes in X (and new one is returned in x)
RenderSam: subroutine
        lda sam_y	; store a copy of sam y
        pha
   	sec
        sbc #$10
        sta sam_y
        lda sam_oam_attrs ; load sprite attrs (flipx)
        ora #$01	; set palette 1
        sta r0		; r0 = attrs
        lda #$b0	; tiles are vertical from b0
        clc
        adc sam_fr	; anim frames are columns
        pha		; tile goes onto stack
        lda #0
        sta r1		; tile * row in r1
        ldx #0		; sprites 0, 1, 2
        ldy #3		; sam is 3 tall
.loop
        lda sam_y	; set sprite y
        sta OAM_RAM,x
        adc #8
        sta sam_y
        inx
        pla		; set sprite tile
        pha
        clc
        adc r1
        sta OAM_RAM,x
        inx
        lda r0		; set sprite attrs
        sta OAM_RAM,x
        inx
        lda sam_x	; set sprite x
        sta OAM_RAM,x
        inx
        lda r1		; inc tile row
        clc
        adc #$10
        sta r1
        
        dey		; loop
        bne .loop
        pla		; pull the tile off the stack
        pla
        sta sam_y
        rts
        
        
;;;; starting oam offset goes in X (and new one is returned in x)
RenderTitle: subroutine
	lda rand
        pha
        
        ;; draw GEOFF
        lda #geoff_text_x	; x pos in r0
        sta r0
        ldy #0
.loop1
	cpy #5
        beq .end_geoff	; if it's the end, bail (and roll back x!)
        
	lda #geoff_text_y	; y pos is constant
        sta OAM_RAM,x
        inx
        
        ;; choose a letter and show it
        jsr PickTitleLetter
        cmp #$ff
        bne .unskip_geoff
        lda #6
.unskip_geoff        
        sta OAM_RAM,x
        
        inx
        lda #0			; no attrs
        sta OAM_RAM,x
        inx
        lda r0			; bring x pos from r0
        sta OAM_RAM,x
        inx
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop1
.end_geoff
        
        ; draw STRANDING
        lda #stranding_text_x	; x pos in r0
        sta r0
.loop2
	cpy #15
        beq .end_stranding	; if it's the end, bail (and roll back x!)
        
	lda #stranding_text_y	; y pos is constant
        sta OAM_RAM,x
        inx
        jsr PickTitleLetter
        cmp #0
        cmp #$ff
        beq .skip_letter
        sta OAM_RAM,x
        inx
        lda #$0			; no attrs, pal s0
        sta OAM_RAM,x
        inx
        lda r0			; bring x pos from r0
        sta OAM_RAM,x
        inx
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop2
        
.skip_letter
	dex
        lda r0			; bring x pos from r0
        clc			; advance x pos
        adc #$10
        sta r0
        iny
        jmp .loop2
	
.end_stranding
        
        ;; update the letter of STRANDING that we're skipping this frame
        inc title_skip
        lda title_skip
        cmp #5 + stranding_letters
        bne .doneskip
        lda #5
        sta title_skip
.doneskip
	pla
        sta rand
        rts
        

geoff_text_x = $58
geoff_text_y = $50
geoff_text:
	.byte "GEOFF"
stranding_text_x = $38
stranding_text_y = $63
stranding_letters = 9
stranding_text:
	.byte "STRANDING"
        .byte 0
        
        
        
Rand: subroutine
	txa
        pha
	lda rand
        tax
        lda rand_table,x
        sta rand
        pla
        tax
        lda rand
	rts
        
;;;;; read the next title letter - and potentially mess with it
PickTitleLetter: subroutine
        lda geoff_text,y	; read next char
        beq .done
	cpy title_skip		; skip this char if it's the skippable one this frame
	beq .skip_letter
        jsr Rand
        cmp title_fade
        bcc .random_letter
        lda geoff_text,y	; read next char
.done
        rts
.random_letter
	clc	; sub 1 from acc
        sbc #0
        and #7
        rts
.skip_letter
	lda #$ff
	rts
        
        
        
        
UpdateMotes: subroutine
	ldx #$20 * 4
        ldy #$10
.loop:
	dec OAM_RAM,x	; dec spr.y
        lda world_inc
        clc
        adc OAM_RAM+3,x
        sta OAM_RAM+3,x

	; move to next sprite
        inx
        inx
        inx
        inx
        dey
	bne .loop	; loop
        rts		; return to caller





LoadMap: subroutine
	; bg 0
	PPU_SETADDR $22c0
        ldx #0
.loop
	lda land_ground,x
        sta PPU_DATA
        inx
        bne .loop
.loop_attr
	lda land_attrs,x
        sta PPU_DATA
        inx
        cpx #$40
        bne .loop_attr
        
        ; bg 1
	PPU_SETADDR $26c0
        ldx #0
.loop2
	lda land_ground,x
        sta PPU_DATA
        inx
        bne .loop2
.loop2_attr
	lda land_attrs,x
        sta PPU_DATA
        inx
        cpx #$40
        bne .loop2_attr
        
        rts
        



; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller



;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"

;;;;; INTERRUPT HANDLERS

NMIHandler:
	rti		; return from interrupt

;;;;; CONSTANT DATA

Palette:
	hex 2d		;screen color
	hex 09081d	;background 0 - foreground
        hex 25		; bg1 unused
        hex 1d181b	;background 1 - background
        hex 25		; bg2 unused
        hex 000000	;background 2
        hex 25		; bg3 unused
        hex 000000	;background 3
        hex 3d		;screen colour MIRROR
        hex 001d0f	;sprite 0
        hex 25		; bg1 unused MIRROR
        hex 0d1727	;sprite 1 -- sam
        hex 25		; bg2 unused MIRROR
        hex 142b3b	;sprite 2
        hex 25		; bg3 unused MIRROR
        hex 1c2c3c	;sprite 3
        
        
        org $8600
	include "rand.asm"
        
 	include "land.asm"

;;;;; CPU VECTORS

	NES_VECTORS

;;;;; TILE SETS

	org $10000
        incbin "strand.chr"
        incbin "strand.chr"
