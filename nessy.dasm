
	include "nesdefs.dasm"

;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
        
timr	byte
posx	byte

;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,0 ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror
        

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette and nametable VRAM
	jsr SetPalette	; set palette colors
        
Tick:
; update posx
	inc timr
        lda #3
        cmp timr
        bne endupdate_posx
        lda #0
        sta timr
	inc posx
        lda #8
        cmp posx
        bpl endupdate_posx
        lda #0
        sta posx
endupdate_posx:

	PPU_SETADDR $2085
	lda #24
        jsr ClearLine
	lda #$20
        sta PPU_ADDR
        lda #$85
        adc posx
        sta PPU_ADDR
        jsr HelloVRAM	; print message in name table
	PPU_SETADDR $20e7
        jsr HelloVRAM	; print message in name table
	PPU_SETADDR $2189
        jsr HelloVRAM	; print message in name table
        
; reset PPU address and scroll registers
        lda #0
        sta PPU_ADDR
        sta PPU_ADDR	; PPU addr = $0000
        sta PPU_SCROLL
        sta PPU_SCROLL  ; PPU scroll = $0000
; activate PPU graphics
        lda #MASK_BG
        sta PPU_MASK 	; enable rendering
        lda #CTRL_NMI
        sta PPU_CTRL	; enable NMI
        jsr WaitSync
        jmp Tick

; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller

; fill video RAM with "Hello World" msg
; PPU ADDR needs to have been set with target pos before calling
HelloVRAM: subroutine
	ldy #0		; set Y counter to 0
.loop:
	lda HelloMsg,y	; get next character
        beq .end	; is 0? exit loop
	sta PPU_DATA	; store+advance PPU
        iny		; next character
	bne .loop	; loop
.end
        rts		; return to caller; fill video RAM with "Hello World" msg

; clear a chunk of video ram
; PPU ADDR needs to have been set with target pos before calling
; Acc is the clear length
ClearLine: subroutine
	ldx #0
.loop:
	stx PPU_DATA	; store+advance PPU
        sbc #1
	bcs .loop	; loop
        rts		; return to caller

; ASCII message to display on screen
HelloMsg:
	.byte "bum on a stix"
        .byte 0		; zero terminator

;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"

;;;;; INTERRUPT HANDLERS

NMIHandler:
	rti		; return from interrupt

;;;;; CONSTANT DATA

Palette:
	hex 01		;screen color
	hex 0c202001	;background 0
        hex 25122201	;background 1
        hex 02112101	;background 2
        hex 0112221c	;background 3
        hex 19293900	;sprite 0
        hex 1a2a3a00	;sprite 1
        hex 1b2b3b00	;sprite 2
        hex 1c2c3c	;sprite 3

;;;;; CPU VECTORS

	NES_VECTORS

;;;;; TILE SETS

	org $10000
        incbin "jroatch.chr"
        incbin "jroatch.chr"
