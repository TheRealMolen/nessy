
	include "nesdefs.dasm"

;;; MACROS


OAM_FLIPX = $40


; Arithmetic shift right A
        MAC _ASR
        cmp #$80
        ror
        ENDM


; InitSprite  spr, x, y, tile
        MAC InitSprite
        lda #{1}
        asl
        asl
        tax
        lda #{3}
        sta OAM_RAM,x
        lda #{4}
        sta OAM_RAM+1,x
        lda #{2}
        sta OAM_RAM+3,x
        ENDM
        
        
;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
        
timr	byte
pad0	byte

kr_x	byte
kr_vx	byte


;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,0 ; mapper 0, 2 PRGs, 1 CHR, horiz. mirror
        

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set palette and nametable VRAM
	jsr SetPalette	; set palette colors
        
        
                
;;;; init sprites
	; many stars
	lda #$18   ; star!
        ldx #$20 * 4
        ldy #0
init_sprite_loop:
	inx
	sta OAM_RAM,x
        inx
        inx
        inx
        iny
        cpy #$10
        bne init_sprite_loop
        
        ;; init kris (palette 1)
        InitSprite $0, $78, $a0, $b0
        InitSprite $1, $78, $a8, $c0
        InitSprite $2, $78, $b0, $d0
        lda #$01
        sta OAM_RAM+2
        sta OAM_RAM+6
        sta OAM_RAM+10
        
        ;; init title
        InitSprite $04, $58, $50, $44	; D
        InitSprite $05, $68, $50, $45	; E
        InitSprite $06, $78, $50, $41	; A
        InitSprite $07, $88, $50, $54	; T
        InitSprite $08, $98, $50, $48	; H
        InitSprite $09, $38, $63, $53	; S
        InitSprite $0a, $48, $63, $54	; T
        InitSprite $0b, $58, $63, $52	; R
        InitSprite $0c, $68, $63, $41	; A
        InitSprite $0d, $78, $63, $4e	; N
        InitSprite $0e, $88, $63, $44	; D
        InitSprite $0f, $98, $63, $49	; I
        InitSprite $10, $a8, $63, $4e	; N
        InitSprite $11, $b8, $63, $47	; G
        
        ;; init motes
        InitSprite $20, $33, $10, $16
        InitSprite $21, $77, $26, $17
        InitSprite $22, $46, $14, $18
        InitSprite $23, $11, $61, $16
        InitSprite $24, $76, $a2, $17
        InitSprite $25, $a0, $13, $18
        InitSprite $26, $e3, $b2, $16
        InitSprite $27, $c1, $51, $17
        InitSprite $28, $e4, $73, $18
        InitSprite $29, $b3, $b5, $16
        InitSprite $2a, $91, $d6, $17
        InitSprite $2b, $48, $e9, $18
        InitSprite $2c, $40, $93, $16
        InitSprite $2d, $33, $b5, $17
        InitSprite $2e, $83, $64, $18
        InitSprite $2f, $d8, $e9, $16
        ; flip some
        lda #OAM_FLIPX
        sta OAM_RAM+2+$20*4
        sta OAM_RAM+2+$21*4
        sta OAM_RAM+2+$23*4
        sta OAM_RAM+2+$25*4
        sta OAM_RAM+2+$27*4
        sta OAM_RAM+2+$2a*4
        sta OAM_RAM+2+$2f*4
        
;;;;; init objects
	lda #$78
        sta kr_x
        

;;;;; start of frame

Tick:
; update posx
	inc timr
        lda #3
        cmp timr
        bne endupdate_posx
        jsr UpdateMotes
        lda #0
        sta timr
endupdate_posx:

        ;understanding flags with adc
        ; if A + (mem) flips A -ve, N bit is set
        ;lda #-4
        ;sta pad0
        ;lda #5
        ;clc
        ;adc pad0
        ;nop

	jsr UpdateKris

        
;;;;; end of frame

; reset PPU address and scroll registers
        lda #0
        sta PPU_ADDR
        sta PPU_ADDR	; PPU addr = $0000
        sta PPU_SCROLL
        sta PPU_SCROLL  ; PPU scroll = $0000
        lda #CTRL_NMI
        sta PPU_CTRL	; enable NMI
        jsr WaitSync
        
; copy oam
	lda #0
        sta OAM_ADDR
        lda #2
        sta OAM_DMA
; activate PPU graphics
        lda #$1e
        sta PPU_MASK 	; enable rendering
        jsr ReadJoypad0
        sta pad0
        jmp Tick
        
        

;;;; update kris
UpdateKris: subroutine

;;; update facing
	lda pad0
        and #$2
        bne .left
	lda pad0
        and #$1
        bne .right
        jmp .friction
.left:
	lda kr_vx
        cmp #-16
        beq .minspd
        dec kr_vx
        cmp #1
        bmi .minspd
        dec kr_vx
.minspd:
; set flipx flag
	lda OAM_RAM+2
	ora #$40
        sta OAM_RAM+2
        sta OAM_RAM+6
        sta OAM_RAM+10
	jmp .enddir
.right:
	lda kr_vx
        cmp #16
        beq .maxspd
        ; bonus turnaround
        inc kr_vx
        cmp #-1
        bpl .maxspd
        inc kr_vx
.maxspd:
; clear flipx flag
	lda OAM_RAM+2
        and #$bf
        sta OAM_RAM+2
        sta OAM_RAM+6
        sta OAM_RAM+10
	jmp .enddir
        
.friction
	lda kr_vx
        cmp #0
        bmi .incvel
        beq .enddir
.decvel
	clc
        sbc #0
	sta kr_vx
	jmp .enddir
.incvel
	sec
        adc #1
	sta kr_vx
.enddir


    ; lda i
    ; cmp j
    ; bmi .i_lt_j
    ; bpl .i_ge_j
    ; bcs .i_le_j
    ; bcc .i_gt_j

; clamp kris to screen
	lda kr_vx
        lda #$8
        cmp #0
        bmi .clampleft
        beq .doneclampx
.clampright
	lda #$f0
        cmp kr_x
        bcs .doneclampx
        lda #0
        sta kr_vx
	jmp .doneclampx
.clampleft
	lda kr_x
        cmp #$6
        bcs .doneclampx
        lda #0
        sta kr_vx
	jmp .doneclampx
.doneclampx
        
        
        

; update kris x pos  
	lda kr_vx
        _ASR		; vx /= 4
        _ASR
        clc
        adc kr_x
        sta kr_x
        
        sta OAM_RAM+3
        sta OAM_RAM+7
        sta OAM_RAM+11


	rts
        
        
        
        
UpdateMotes: subroutine
	ldx #$20 * 4
.loop:
	dec OAM_RAM,x	; dec spr.y

	; move to next sprite
        inx
        inx
        inx
        inx
	cpx #$40 + (#$21 * 4)
	bne .loop	; loop
        rts		; return to caller









; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller



;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"

;;;;; INTERRUPT HANDLERS

NMIHandler:
	rti		; return from interrupt

;;;;; CONSTANT DATA

Palette:
	hex 01		;screen color
	hex 10001d01	;background 0 (title text)
        hex 00000000	;background 1
        hex 00000000	;background 2
        hex 00000020	;background 3
        hex 3d230025	;sprite 0
        hex 08171725	;sprite 1 -- kris
        hex 142b3b25	;sprite 2
        hex 1c2c3c25	;sprite 3

;;;;; CPU VECTORS

	NES_VECTORS

;;;;; TILE SETS

	org $10000
        incbin "strand.chr"
        incbin "strand.chr"
