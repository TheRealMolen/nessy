

;;; MACROS

PAD_RIGHT  = $01
PAD_LEFT   = $02
PAD_DOWN   = $04
PAD_UP	   = $08
PAD_START  = $10
PAD_SELECT = $20
PAD_B	   = $40
PAD_A	   = $80


OAM_FLIPX = $40


; 16 bit set immediate, I, R => R = I
	MAC _STI16
        lda #<{1}	; low byte
        sta {2}
        lda #>{1}	; high byte
        sta {2}+1
        ENDM


; Arithmetic shift right A
        MAC _ASR
        cmp #$80
        ror
        ENDM
        
; 16 bit LSL - param is word in mem
	MAC _LSL16
        lda {1}
        asl
        sta {1}
        lda {1}+1
        rol
        sta {1}+1
        ENDM
        
; 16 bit add - params A, B, C => C = A + B
	MAC _ADD16
        clc
        lda {1}
        adc {2}
        sta {3}
        lda {1}+1
        adc {2}+1
        sta {3}+1
        ENDM
        
; 16 bit sub - params A, B, C => C = A - B
	MAC _SUB16
        sec
        lda {1}
        sbc {2}
        sta {3}
        lda {1}+1
        sbc {2}+1
        sta {3}+1
        ENDM
        
; Negate A
	MAC _NEG
        eor #$ff
        sec
        adc #0
        ENDM
        
        
; Increment 16 bit
	MAC _INC16
        lda {1}
        clc
        adc #1
        sta {1}
        lda {1}+1
        adc #0
        sta {1}+1
        ENDM
        
; Decrement 16 bit
	MAC _DEC16
        lda {1}
        sec
        sbc #1
        sta {1}
        lda {1}+1
        sbc #0
        sta {1}+1
        ENDM
        
        
        
; Signed divide by 2
	MAC DivBy2s
        bpl .positive
        ;; for negative values, we add (divisor-1) so we round to zero
        clc
        adc #1
.positive
        _ASR		; vx /= 2
        ENDM
        
; Signed divide by 4
	MAC DivBy4s
        bpl .positive
        ;; for negative values, we add (divisor-1) so we round to zero
        clc
        adc #3
.positive
        _ASR		; vx /= 4
        _ASR
        ENDM
        
; Signed divide by 8
	MAC DivBy8s
        bpl .positive
        ;; for negative values, we add (divisor-1) so we round to zero
        clc
        adc #7
.positive
        _ASR		; vx /= 8
        _ASR
        _ASR
        ENDM


; InitSprite  spr, x, y, tile
        MAC InitSprite
        lda #{1}
        asl
        asl
        tax
        lda #{3}
        sta OAM_RAM,x
        lda #{4}
        sta OAM_RAM+1,x
        lda #{2}
        sta OAM_RAM+3,x
        ENDM
        
        
;;; set the flipx flag. param is address of attrs
	MAC SetSpriteFlipX
	lda {1}
	ora #OAM_FLIPX
        sta {1}
        ENDM

;;; clear the flipx flag. param is address of attrs
	MAC ClearSpriteFlipX
	lda {1}
        and #~OAM_FLIPX
        sta {1}
        ENDM
        